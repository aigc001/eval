{"trg_prediction": "\n# Get the total vocabulary from the word2vec model\ntotal_vocab = word2vec.wv.vocab\n\n# Create a mapping from word to index\nword_to_index = {word: index for index, word in enumerate(total_vocab)}\n\n# Get the total number of words in the vocabulary\ntotal_words = len(total_vocab)\n\n# Create a matrix to hold the word vectors\nweights_matrix = np.zeros((total_words, word2vec.vector_size))\n\n# Fill in the weights_matrix with the word vectors\nfor word, index in word_to_index.items():\n    weights_matrix[index] = word2vec.wv[word]\n\n# Create a PyTorch embedding layer\nembedding_layer = torch.nn.Embedding.from_pretrained(torch.FloatTensor(weights_matrix))\n\n# Embed the input data\nembedded_input = embedding_layer(input_Tensor)\n"}